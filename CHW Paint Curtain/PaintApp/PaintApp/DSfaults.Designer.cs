//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Pilkngton.ProjectPaint.PaintApp {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DSfaults")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSfaults : System.Data.DataSet {
        
        private DTBlipsDataTable tableDTBlips;
        
        private DTstreamsDataTable tableDTstreams;
        
        private DToverloadDataTable tableDToverload;
        
        private BlipMapDataTable tableBlipMap;
        
        private StreamMapDataTable tableStreamMap;
        
        private OverloadMapDataTable tableOverloadMap;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSfaults() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSfaults(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DTBlips"] != null)) {
                    base.Tables.Add(new DTBlipsDataTable(ds.Tables["DTBlips"]));
                }
                if ((ds.Tables["DTstreams"] != null)) {
                    base.Tables.Add(new DTstreamsDataTable(ds.Tables["DTstreams"]));
                }
                if ((ds.Tables["DToverload"] != null)) {
                    base.Tables.Add(new DToverloadDataTable(ds.Tables["DToverload"]));
                }
                if ((ds.Tables["BlipMap"] != null)) {
                    base.Tables.Add(new BlipMapDataTable(ds.Tables["BlipMap"]));
                }
                if ((ds.Tables["StreamMap"] != null)) {
                    base.Tables.Add(new StreamMapDataTable(ds.Tables["StreamMap"]));
                }
                if ((ds.Tables["OverloadMap"] != null)) {
                    base.Tables.Add(new OverloadMapDataTable(ds.Tables["OverloadMap"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DTBlipsDataTable DTBlips {
            get {
                return this.tableDTBlips;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DTstreamsDataTable DTstreams {
            get {
                return this.tableDTstreams;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DToverloadDataTable DToverload {
            get {
                return this.tableDToverload;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BlipMapDataTable BlipMap {
            get {
                return this.tableBlipMap;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StreamMapDataTable StreamMap {
            get {
                return this.tableStreamMap;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OverloadMapDataTable OverloadMap {
            get {
                return this.tableOverloadMap;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DSfaults cln = ((DSfaults)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DTBlips"] != null)) {
                    base.Tables.Add(new DTBlipsDataTable(ds.Tables["DTBlips"]));
                }
                if ((ds.Tables["DTstreams"] != null)) {
                    base.Tables.Add(new DTstreamsDataTable(ds.Tables["DTstreams"]));
                }
                if ((ds.Tables["DToverload"] != null)) {
                    base.Tables.Add(new DToverloadDataTable(ds.Tables["DToverload"]));
                }
                if ((ds.Tables["BlipMap"] != null)) {
                    base.Tables.Add(new BlipMapDataTable(ds.Tables["BlipMap"]));
                }
                if ((ds.Tables["StreamMap"] != null)) {
                    base.Tables.Add(new StreamMapDataTable(ds.Tables["StreamMap"]));
                }
                if ((ds.Tables["OverloadMap"] != null)) {
                    base.Tables.Add(new OverloadMapDataTable(ds.Tables["OverloadMap"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDTBlips = ((DTBlipsDataTable)(base.Tables["DTBlips"]));
            if ((initTable == true)) {
                if ((this.tableDTBlips != null)) {
                    this.tableDTBlips.InitVars();
                }
            }
            this.tableDTstreams = ((DTstreamsDataTable)(base.Tables["DTstreams"]));
            if ((initTable == true)) {
                if ((this.tableDTstreams != null)) {
                    this.tableDTstreams.InitVars();
                }
            }
            this.tableDToverload = ((DToverloadDataTable)(base.Tables["DToverload"]));
            if ((initTable == true)) {
                if ((this.tableDToverload != null)) {
                    this.tableDToverload.InitVars();
                }
            }
            this.tableBlipMap = ((BlipMapDataTable)(base.Tables["BlipMap"]));
            if ((initTable == true)) {
                if ((this.tableBlipMap != null)) {
                    this.tableBlipMap.InitVars();
                }
            }
            this.tableStreamMap = ((StreamMapDataTable)(base.Tables["StreamMap"]));
            if ((initTable == true)) {
                if ((this.tableStreamMap != null)) {
                    this.tableStreamMap.InitVars();
                }
            }
            this.tableOverloadMap = ((OverloadMapDataTable)(base.Tables["OverloadMap"]));
            if ((initTable == true)) {
                if ((this.tableOverloadMap != null)) {
                    this.tableOverloadMap.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSfaults";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSfaults.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDTBlips = new DTBlipsDataTable();
            base.Tables.Add(this.tableDTBlips);
            this.tableDTstreams = new DTstreamsDataTable();
            base.Tables.Add(this.tableDTstreams);
            this.tableDToverload = new DToverloadDataTable();
            base.Tables.Add(this.tableDToverload);
            this.tableBlipMap = new BlipMapDataTable();
            base.Tables.Add(this.tableBlipMap);
            this.tableStreamMap = new StreamMapDataTable();
            base.Tables.Add(this.tableStreamMap);
            this.tableOverloadMap = new OverloadMapDataTable();
            base.Tables.Add(this.tableOverloadMap);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDTBlips() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDTstreams() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDToverload() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBlipMap() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStreamMap() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOverloadMap() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DSfaults ds = new DSfaults();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DTBlipsRowChangeEventHandler(object sender, DTBlipsRowChangeEvent e);
        
        public delegate void DTstreamsRowChangeEventHandler(object sender, DTstreamsRowChangeEvent e);
        
        public delegate void DToverloadRowChangeEventHandler(object sender, DToverloadRowChangeEvent e);
        
        public delegate void BlipMapRowChangeEventHandler(object sender, BlipMapRowChangeEvent e);
        
        public delegate void StreamMapRowChangeEventHandler(object sender, StreamMapRowChangeEvent e);
        
        public delegate void OverloadMapRowChangeEventHandler(object sender, OverloadMapRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DTBlipsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeStamp;
            
            private System.Data.DataColumn columnX;
            
            private System.Data.DataColumn columnY;
            
            private System.Data.DataColumn columndeltaX;
            
            private System.Data.DataColumn columndeltaY;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsDataTable() {
                this.TableName = "DTBlips";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTBlipsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DTBlipsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deltaXColumn {
                get {
                    return this.columndeltaX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deltaYColumn {
                get {
                    return this.columndeltaY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsRow this[int index] {
                get {
                    return ((DTBlipsRow)(this.Rows[index]));
                }
            }
            
            public event DTBlipsRowChangeEventHandler DTBlipsRowChanging;
            
            public event DTBlipsRowChangeEventHandler DTBlipsRowChanged;
            
            public event DTBlipsRowChangeEventHandler DTBlipsRowDeleting;
            
            public event DTBlipsRowChangeEventHandler DTBlipsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDTBlipsRow(DTBlipsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsRow AddDTBlipsRow(System.DateTime TimeStamp, int X, int Y, int deltaX, int deltaY) {
                DTBlipsRow rowDTBlipsRow = ((DTBlipsRow)(this.NewRow()));
                rowDTBlipsRow.ItemArray = new object[] {
                        TimeStamp,
                        X,
                        Y,
                        deltaX,
                        deltaY};
                this.Rows.Add(rowDTBlipsRow);
                return rowDTBlipsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsRow FindByTimeStampX(System.DateTime TimeStamp, int X) {
                return ((DTBlipsRow)(this.Rows.Find(new object[] {
                            TimeStamp,
                            X})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DTBlipsDataTable cln = ((DTBlipsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DTBlipsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnX = base.Columns["X"];
                this.columnY = base.Columns["Y"];
                this.columndeltaX = base.Columns["deltaX"];
                this.columndeltaY = base.Columns["deltaY"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeStamp = new System.Data.DataColumn("TimeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnX = new System.Data.DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnX);
                this.columnY = new System.Data.DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnY);
                this.columndeltaX = new System.Data.DataColumn("deltaX", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeltaX);
                this.columndeltaY = new System.Data.DataColumn("deltaY", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeltaY);
                this.Constraints.Add(new System.Data.UniqueConstraint("DTBlips_PK", new System.Data.DataColumn[] {
                                this.columnTimeStamp,
                                this.columnX}, true));
                this.columnTimeStamp.AllowDBNull = false;
                this.columnX.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsRow NewDTBlipsRow() {
                return ((DTBlipsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DTBlipsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DTBlipsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DTBlipsRowChanged != null)) {
                    this.DTBlipsRowChanged(this, new DTBlipsRowChangeEvent(((DTBlipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DTBlipsRowChanging != null)) {
                    this.DTBlipsRowChanging(this, new DTBlipsRowChangeEvent(((DTBlipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DTBlipsRowDeleted != null)) {
                    this.DTBlipsRowDeleted(this, new DTBlipsRowChangeEvent(((DTBlipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DTBlipsRowDeleting != null)) {
                    this.DTBlipsRowDeleting(this, new DTBlipsRowChangeEvent(((DTBlipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDTBlipsRow(DTBlipsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSfaults ds = new DSfaults();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DTBlipsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DTstreamsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeStampStart;
            
            private System.Data.DataColumn columnTimeStampEnd;
            
            private System.Data.DataColumn columnIsLive;
            
            private System.Data.DataColumn columnX;
            
            private System.Data.DataColumn columndeltaX;
            
            private System.Data.DataColumn columndeltaY;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsDataTable() {
                this.TableName = "DTstreams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTstreamsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DTstreamsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampStartColumn {
                get {
                    return this.columnTimeStampStart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampEndColumn {
                get {
                    return this.columnTimeStampEnd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLiveColumn {
                get {
                    return this.columnIsLive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deltaXColumn {
                get {
                    return this.columndeltaX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deltaYColumn {
                get {
                    return this.columndeltaY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsRow this[int index] {
                get {
                    return ((DTstreamsRow)(this.Rows[index]));
                }
            }
            
            public event DTstreamsRowChangeEventHandler DTstreamsRowChanging;
            
            public event DTstreamsRowChangeEventHandler DTstreamsRowChanged;
            
            public event DTstreamsRowChangeEventHandler DTstreamsRowDeleting;
            
            public event DTstreamsRowChangeEventHandler DTstreamsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDTstreamsRow(DTstreamsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsRow AddDTstreamsRow(System.DateTime TimeStampStart, System.DateTime TimeStampEnd, bool IsLive, int X, int deltaX, string deltaY) {
                DTstreamsRow rowDTstreamsRow = ((DTstreamsRow)(this.NewRow()));
                rowDTstreamsRow.ItemArray = new object[] {
                        TimeStampStart,
                        TimeStampEnd,
                        IsLive,
                        X,
                        deltaX,
                        deltaY};
                this.Rows.Add(rowDTstreamsRow);
                return rowDTstreamsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsRow FindByTimeStampStartX(System.DateTime TimeStampStart, int X) {
                return ((DTstreamsRow)(this.Rows.Find(new object[] {
                            TimeStampStart,
                            X})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DTstreamsDataTable cln = ((DTstreamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DTstreamsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeStampStart = base.Columns["TimeStampStart"];
                this.columnTimeStampEnd = base.Columns["TimeStampEnd"];
                this.columnIsLive = base.Columns["IsLive"];
                this.columnX = base.Columns["X"];
                this.columndeltaX = base.Columns["deltaX"];
                this.columndeltaY = base.Columns["deltaY"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeStampStart = new System.Data.DataColumn("TimeStampStart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStampStart);
                this.columnTimeStampEnd = new System.Data.DataColumn("TimeStampEnd", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStampEnd);
                this.columnIsLive = new System.Data.DataColumn("IsLive", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLive);
                this.columnX = new System.Data.DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnX);
                this.columndeltaX = new System.Data.DataColumn("deltaX", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeltaX);
                this.columndeltaY = new System.Data.DataColumn("deltaY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeltaY);
                this.Constraints.Add(new System.Data.UniqueConstraint("DTstreams_PK", new System.Data.DataColumn[] {
                                this.columnTimeStampStart,
                                this.columnX}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("DTstreams_IsLiveKey", new System.Data.DataColumn[] {
                                this.columnIsLive}, false));
                this.columnTimeStampStart.AllowDBNull = false;
                this.columnIsLive.Unique = true;
                this.columnX.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsRow NewDTstreamsRow() {
                return ((DTstreamsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DTstreamsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DTstreamsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DTstreamsRowChanged != null)) {
                    this.DTstreamsRowChanged(this, new DTstreamsRowChangeEvent(((DTstreamsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DTstreamsRowChanging != null)) {
                    this.DTstreamsRowChanging(this, new DTstreamsRowChangeEvent(((DTstreamsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DTstreamsRowDeleted != null)) {
                    this.DTstreamsRowDeleted(this, new DTstreamsRowChangeEvent(((DTstreamsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DTstreamsRowDeleting != null)) {
                    this.DTstreamsRowDeleting(this, new DTstreamsRowChangeEvent(((DTstreamsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDTstreamsRow(DTstreamsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSfaults ds = new DSfaults();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DTstreamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DToverloadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeStampStart;
            
            private System.Data.DataColumn columnTimeStampEnd;
            
            private System.Data.DataColumn columnIsLive;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadDataTable() {
                this.TableName = "DToverload";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DToverloadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DToverloadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampStartColumn {
                get {
                    return this.columnTimeStampStart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampEndColumn {
                get {
                    return this.columnTimeStampEnd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLiveColumn {
                get {
                    return this.columnIsLive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadRow this[int index] {
                get {
                    return ((DToverloadRow)(this.Rows[index]));
                }
            }
            
            public event DToverloadRowChangeEventHandler DToverloadRowChanging;
            
            public event DToverloadRowChangeEventHandler DToverloadRowChanged;
            
            public event DToverloadRowChangeEventHandler DToverloadRowDeleting;
            
            public event DToverloadRowChangeEventHandler DToverloadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDToverloadRow(DToverloadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadRow AddDToverloadRow(System.DateTime TimeStampStart, System.DateTime TimeStampEnd, bool IsLive) {
                DToverloadRow rowDToverloadRow = ((DToverloadRow)(this.NewRow()));
                rowDToverloadRow.ItemArray = new object[] {
                        TimeStampStart,
                        TimeStampEnd,
                        IsLive};
                this.Rows.Add(rowDToverloadRow);
                return rowDToverloadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadRow FindByTimeStampStart(System.DateTime TimeStampStart) {
                return ((DToverloadRow)(this.Rows.Find(new object[] {
                            TimeStampStart})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DToverloadDataTable cln = ((DToverloadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DToverloadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeStampStart = base.Columns["TimeStampStart"];
                this.columnTimeStampEnd = base.Columns["TimeStampEnd"];
                this.columnIsLive = base.Columns["IsLive"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeStampStart = new System.Data.DataColumn("TimeStampStart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStampStart);
                this.columnTimeStampEnd = new System.Data.DataColumn("TimeStampEnd", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStampEnd);
                this.columnIsLive = new System.Data.DataColumn("IsLive", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLive);
                this.Constraints.Add(new System.Data.UniqueConstraint("DToverload_PK", new System.Data.DataColumn[] {
                                this.columnTimeStampStart}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("DToverload_IsLiveKey", new System.Data.DataColumn[] {
                                this.columnIsLive}, false));
                this.columnTimeStampStart.AllowDBNull = false;
                this.columnTimeStampStart.Unique = true;
                this.columnIsLive.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadRow NewDToverloadRow() {
                return ((DToverloadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DToverloadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DToverloadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DToverloadRowChanged != null)) {
                    this.DToverloadRowChanged(this, new DToverloadRowChangeEvent(((DToverloadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DToverloadRowChanging != null)) {
                    this.DToverloadRowChanging(this, new DToverloadRowChangeEvent(((DToverloadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DToverloadRowDeleted != null)) {
                    this.DToverloadRowDeleted(this, new DToverloadRowChangeEvent(((DToverloadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DToverloadRowDeleting != null)) {
                    this.DToverloadRowDeleting(this, new DToverloadRowChangeEvent(((DToverloadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDToverloadRow(DToverloadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSfaults ds = new DSfaults();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DToverloadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BlipMapDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeStamp;
            
            private System.Data.DataColumn columnZoneMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlipMapDataTable() {
                this.TableName = "BlipMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BlipMapDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BlipMapDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZoneMapColumn {
                get {
                    return this.columnZoneMap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlipMapRow this[int index] {
                get {
                    return ((BlipMapRow)(this.Rows[index]));
                }
            }
            
            public event BlipMapRowChangeEventHandler BlipMapRowChanging;
            
            public event BlipMapRowChangeEventHandler BlipMapRowChanged;
            
            public event BlipMapRowChangeEventHandler BlipMapRowDeleting;
            
            public event BlipMapRowChangeEventHandler BlipMapRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBlipMapRow(BlipMapRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlipMapRow AddBlipMapRow(System.DateTime TimeStamp, int ZoneMap) {
                BlipMapRow rowBlipMapRow = ((BlipMapRow)(this.NewRow()));
                rowBlipMapRow.ItemArray = new object[] {
                        TimeStamp,
                        ZoneMap};
                this.Rows.Add(rowBlipMapRow);
                return rowBlipMapRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BlipMapDataTable cln = ((BlipMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BlipMapDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnZoneMap = base.Columns["ZoneMap"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeStamp = new System.Data.DataColumn("TimeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnZoneMap = new System.Data.DataColumn("ZoneMap", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneMap);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint11", new System.Data.DataColumn[] {
                                this.columnTimeStamp}, false));
                this.columnTimeStamp.AllowDBNull = false;
                this.columnTimeStamp.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlipMapRow NewBlipMapRow() {
                return ((BlipMapRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BlipMapRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BlipMapRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BlipMapRowChanged != null)) {
                    this.BlipMapRowChanged(this, new BlipMapRowChangeEvent(((BlipMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BlipMapRowChanging != null)) {
                    this.BlipMapRowChanging(this, new BlipMapRowChangeEvent(((BlipMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BlipMapRowDeleted != null)) {
                    this.BlipMapRowDeleted(this, new BlipMapRowChangeEvent(((BlipMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BlipMapRowDeleting != null)) {
                    this.BlipMapRowDeleting(this, new BlipMapRowChangeEvent(((BlipMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBlipMapRow(BlipMapRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSfaults ds = new DSfaults();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BlipMapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StreamMapDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeStampStart;
            
            private System.Data.DataColumn columnTimeStampStop;
            
            private System.Data.DataColumn columnZoneMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamMapDataTable() {
                this.TableName = "StreamMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StreamMapDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StreamMapDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampStartColumn {
                get {
                    return this.columnTimeStampStart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampStopColumn {
                get {
                    return this.columnTimeStampStop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZoneMapColumn {
                get {
                    return this.columnZoneMap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamMapRow this[int index] {
                get {
                    return ((StreamMapRow)(this.Rows[index]));
                }
            }
            
            public event StreamMapRowChangeEventHandler StreamMapRowChanging;
            
            public event StreamMapRowChangeEventHandler StreamMapRowChanged;
            
            public event StreamMapRowChangeEventHandler StreamMapRowDeleting;
            
            public event StreamMapRowChangeEventHandler StreamMapRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStreamMapRow(StreamMapRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamMapRow AddStreamMapRow(System.DateTime TimeStampStart, string TimeStampStop, int ZoneMap) {
                StreamMapRow rowStreamMapRow = ((StreamMapRow)(this.NewRow()));
                rowStreamMapRow.ItemArray = new object[] {
                        TimeStampStart,
                        TimeStampStop,
                        ZoneMap};
                this.Rows.Add(rowStreamMapRow);
                return rowStreamMapRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StreamMapDataTable cln = ((StreamMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StreamMapDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeStampStart = base.Columns["TimeStampStart"];
                this.columnTimeStampStop = base.Columns["TimeStampStop"];
                this.columnZoneMap = base.Columns["ZoneMap"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeStampStart = new System.Data.DataColumn("TimeStampStart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStampStart);
                this.columnTimeStampStop = new System.Data.DataColumn("TimeStampStop", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStampStop);
                this.columnZoneMap = new System.Data.DataColumn("ZoneMap", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneMap);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint111", new System.Data.DataColumn[] {
                                this.columnTimeStampStart}, false));
                this.columnTimeStampStart.AllowDBNull = false;
                this.columnTimeStampStart.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamMapRow NewStreamMapRow() {
                return ((StreamMapRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StreamMapRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StreamMapRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StreamMapRowChanged != null)) {
                    this.StreamMapRowChanged(this, new StreamMapRowChangeEvent(((StreamMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StreamMapRowChanging != null)) {
                    this.StreamMapRowChanging(this, new StreamMapRowChangeEvent(((StreamMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StreamMapRowDeleted != null)) {
                    this.StreamMapRowDeleted(this, new StreamMapRowChangeEvent(((StreamMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StreamMapRowDeleting != null)) {
                    this.StreamMapRowDeleting(this, new StreamMapRowChangeEvent(((StreamMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStreamMapRow(StreamMapRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSfaults ds = new DSfaults();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StreamMapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OverloadMapDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeStamp;
            
            private System.Data.DataColumn columnState;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverloadMapDataTable() {
                this.TableName = "OverloadMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverloadMapDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OverloadMapDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverloadMapRow this[int index] {
                get {
                    return ((OverloadMapRow)(this.Rows[index]));
                }
            }
            
            public event OverloadMapRowChangeEventHandler OverloadMapRowChanging;
            
            public event OverloadMapRowChangeEventHandler OverloadMapRowChanged;
            
            public event OverloadMapRowChangeEventHandler OverloadMapRowDeleting;
            
            public event OverloadMapRowChangeEventHandler OverloadMapRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOverloadMapRow(OverloadMapRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverloadMapRow AddOverloadMapRow(System.DateTime TimeStamp, bool State) {
                OverloadMapRow rowOverloadMapRow = ((OverloadMapRow)(this.NewRow()));
                rowOverloadMapRow.ItemArray = new object[] {
                        TimeStamp,
                        State};
                this.Rows.Add(rowOverloadMapRow);
                return rowOverloadMapRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OverloadMapDataTable cln = ((OverloadMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OverloadMapDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnState = base.Columns["State"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeStamp = new System.Data.DataColumn("TimeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnState = new System.Data.DataColumn("State", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1111", new System.Data.DataColumn[] {
                                this.columnTimeStamp}, false));
                this.columnTimeStamp.AllowDBNull = false;
                this.columnTimeStamp.Unique = true;
                this.columnState.Caption = "ZoneMap";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverloadMapRow NewOverloadMapRow() {
                return ((OverloadMapRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OverloadMapRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OverloadMapRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OverloadMapRowChanged != null)) {
                    this.OverloadMapRowChanged(this, new OverloadMapRowChangeEvent(((OverloadMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OverloadMapRowChanging != null)) {
                    this.OverloadMapRowChanging(this, new OverloadMapRowChangeEvent(((OverloadMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OverloadMapRowDeleted != null)) {
                    this.OverloadMapRowDeleted(this, new OverloadMapRowChangeEvent(((OverloadMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OverloadMapRowDeleting != null)) {
                    this.OverloadMapRowDeleting(this, new OverloadMapRowChangeEvent(((OverloadMapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOverloadMapRow(OverloadMapRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSfaults ds = new DSfaults();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OverloadMapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DTBlipsRow : System.Data.DataRow {
            
            private DTBlipsDataTable tableDTBlips;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTBlipsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDTBlips = ((DTBlipsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStamp {
                get {
                    return ((System.DateTime)(this[this.tableDTBlips.TimeStampColumn]));
                }
                set {
                    this[this.tableDTBlips.TimeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int X {
                get {
                    return ((int)(this[this.tableDTBlips.XColumn]));
                }
                set {
                    this[this.tableDTBlips.XColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableDTBlips.YColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Y\' in table \'DTBlips\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTBlips.YColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deltaX {
                get {
                    try {
                        return ((int)(this[this.tableDTBlips.deltaXColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'deltaX\' in table \'DTBlips\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTBlips.deltaXColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deltaY {
                get {
                    try {
                        return ((int)(this[this.tableDTBlips.deltaYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'deltaY\' in table \'DTBlips\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTBlips.deltaYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYNull() {
                return this.IsNull(this.tableDTBlips.YColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYNull() {
                this[this.tableDTBlips.YColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeltaXNull() {
                return this.IsNull(this.tableDTBlips.deltaXColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeltaXNull() {
                this[this.tableDTBlips.deltaXColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeltaYNull() {
                return this.IsNull(this.tableDTBlips.deltaYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeltaYNull() {
                this[this.tableDTBlips.deltaYColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DTstreamsRow : System.Data.DataRow {
            
            private DTstreamsDataTable tableDTstreams;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTstreamsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDTstreams = ((DTstreamsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStampStart {
                get {
                    return ((System.DateTime)(this[this.tableDTstreams.TimeStampStartColumn]));
                }
                set {
                    this[this.tableDTstreams.TimeStampStartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStampEnd {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDTstreams.TimeStampEndColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeStampEnd\' in table \'DTstreams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTstreams.TimeStampEndColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLive {
                get {
                    try {
                        return ((bool)(this[this.tableDTstreams.IsLiveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsLive\' in table \'DTstreams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTstreams.IsLiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int X {
                get {
                    return ((int)(this[this.tableDTstreams.XColumn]));
                }
                set {
                    this[this.tableDTstreams.XColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deltaX {
                get {
                    try {
                        return ((int)(this[this.tableDTstreams.deltaXColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'deltaX\' in table \'DTstreams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTstreams.deltaXColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string deltaY {
                get {
                    try {
                        return ((string)(this[this.tableDTstreams.deltaYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'deltaY\' in table \'DTstreams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTstreams.deltaYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampEndNull() {
                return this.IsNull(this.tableDTstreams.TimeStampEndColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampEndNull() {
                this[this.tableDTstreams.TimeStampEndColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLiveNull() {
                return this.IsNull(this.tableDTstreams.IsLiveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLiveNull() {
                this[this.tableDTstreams.IsLiveColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeltaXNull() {
                return this.IsNull(this.tableDTstreams.deltaXColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeltaXNull() {
                this[this.tableDTstreams.deltaXColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeltaYNull() {
                return this.IsNull(this.tableDTstreams.deltaYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeltaYNull() {
                this[this.tableDTstreams.deltaYColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DToverloadRow : System.Data.DataRow {
            
            private DToverloadDataTable tableDToverload;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DToverloadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDToverload = ((DToverloadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStampStart {
                get {
                    return ((System.DateTime)(this[this.tableDToverload.TimeStampStartColumn]));
                }
                set {
                    this[this.tableDToverload.TimeStampStartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStampEnd {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDToverload.TimeStampEndColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeStampEnd\' in table \'DToverload\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDToverload.TimeStampEndColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLive {
                get {
                    try {
                        return ((bool)(this[this.tableDToverload.IsLiveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsLive\' in table \'DToverload\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDToverload.IsLiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampEndNull() {
                return this.IsNull(this.tableDToverload.TimeStampEndColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampEndNull() {
                this[this.tableDToverload.TimeStampEndColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLiveNull() {
                return this.IsNull(this.tableDToverload.IsLiveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLiveNull() {
                this[this.tableDToverload.IsLiveColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BlipMapRow : System.Data.DataRow {
            
            private BlipMapDataTable tableBlipMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BlipMapRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBlipMap = ((BlipMapDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStamp {
                get {
                    return ((System.DateTime)(this[this.tableBlipMap.TimeStampColumn]));
                }
                set {
                    this[this.tableBlipMap.TimeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZoneMap {
                get {
                    try {
                        return ((int)(this[this.tableBlipMap.ZoneMapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ZoneMap\' in table \'BlipMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBlipMap.ZoneMapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneMapNull() {
                return this.IsNull(this.tableBlipMap.ZoneMapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneMapNull() {
                this[this.tableBlipMap.ZoneMapColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StreamMapRow : System.Data.DataRow {
            
            private StreamMapDataTable tableStreamMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StreamMapRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStreamMap = ((StreamMapDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStampStart {
                get {
                    return ((System.DateTime)(this[this.tableStreamMap.TimeStampStartColumn]));
                }
                set {
                    this[this.tableStreamMap.TimeStampStartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeStampStop {
                get {
                    try {
                        return ((string)(this[this.tableStreamMap.TimeStampStopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeStampStop\' in table \'StreamMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreamMap.TimeStampStopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZoneMap {
                get {
                    try {
                        return ((int)(this[this.tableStreamMap.ZoneMapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ZoneMap\' in table \'StreamMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreamMap.ZoneMapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampStopNull() {
                return this.IsNull(this.tableStreamMap.TimeStampStopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampStopNull() {
                this[this.tableStreamMap.TimeStampStopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneMapNull() {
                return this.IsNull(this.tableStreamMap.ZoneMapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneMapNull() {
                this[this.tableStreamMap.ZoneMapColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OverloadMapRow : System.Data.DataRow {
            
            private OverloadMapDataTable tableOverloadMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverloadMapRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOverloadMap = ((OverloadMapDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStamp {
                get {
                    return ((System.DateTime)(this[this.tableOverloadMap.TimeStampColumn]));
                }
                set {
                    this[this.tableOverloadMap.TimeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool State {
                get {
                    try {
                        return ((bool)(this[this.tableOverloadMap.StateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'State\' in table \'OverloadMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverloadMap.StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableOverloadMap.StateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableOverloadMap.StateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DTBlipsRowChangeEvent : System.EventArgs {
            
            private DTBlipsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsRowChangeEvent(DTBlipsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTBlipsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DTstreamsRowChangeEvent : System.EventArgs {
            
            private DTstreamsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsRowChangeEvent(DTstreamsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTstreamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DToverloadRowChangeEvent : System.EventArgs {
            
            private DToverloadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadRowChangeEvent(DToverloadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DToverloadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BlipMapRowChangeEvent : System.EventArgs {
            
            private BlipMapRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlipMapRowChangeEvent(BlipMapRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BlipMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StreamMapRowChangeEvent : System.EventArgs {
            
            private StreamMapRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamMapRowChangeEvent(StreamMapRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OverloadMapRowChangeEvent : System.EventArgs {
            
            private OverloadMapRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverloadMapRowChangeEvent(OverloadMapRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverloadMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591